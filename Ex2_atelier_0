"""
Exercice 2 Atelier 0, peux entre encore optimisé si j'avais fait des constante des tableau de la meme categorie:exemple
un tableau des constantes de tarif
"""
TYPE_LETTRE=["verte", "prioritaire","eco-pli"]
OUTREMER1=["GUYANE", "GUADELOUPE", "MARTINIQUE", "LA RÉUNION", "ST PIERRE ET MIQUELON", "ST BARTHÉLÉMY", "ST-MARTIN,MAYOTTE"]
OUTREMER2=["NOUVELLE-CALÉDONIE", "POLYNÉSIE FRANÇAISE", "WALLIS-ET-FUTUNA"]

POIDS_VERTE=[20,100,250,500,1000,3000]
POIDS_PRIORITAIRE=[20,100,250,500,3000]
POIDS_ECO_PLI=[20,100,250]

TARIF_NET_VERTE=[1.16,2.32,4.00,6.00,7.50,10.50]
TARIF_NET_PRIORITAIRE=[1.43,2.86,5.26,7.89,11.44]
TARIF_NET_ECO_PLI=[1.14,2.28,3.92]

TAAF_VERTE_OM1=0.05
TAAF_PRIORITAIRE_OM1=0.05
TAAF_ECO_PLI_OM1=0.02

TAAF_VERTE_OM2=0.11
TAAF_PRIORITAIRE_OM2=0.11
TAAF_ECO_PLI_OM2=0.05

LIMITE=100
STICKER_SUIVIE=0.50

def verification_parametre(poids:float,type_lettre:str):
    """
    Fonction qui permet de verifier si le poids et le type de la lettre correspond bien au categorie
    :param poids(float): poids de la lettre
    :param type_lettre(str):type de la lettre
    :return:boolean : Elle renvoie True si la condition est remplie et False si il y a un probleme
    """
    if type_lettre not in TYPE_LETTRE:
        print("Erreur le type de lettre ne correspond a aucune categorie")
        return False
    else:
        if type_lettre == TYPE_LETTRE[0]:
            if POIDS_VERTE[-1]<poids or poids<0:#Ici on compare le poids le plus elevé de la categorie et evidemment on verifie si le poids n'est pas negatif
                print("Erreur le poids n'est pas  disponible pour cette categorie ")
                return False
        if type_lettre == TYPE_LETTRE[1]:
            if POIDS_PRIORITAIRE[-1] < poids or poids<0:
                print("Erreur le poids n'est pas  disponible pour cette categorie ")
                return False
        if type_lettre == TYPE_LETTRE[2]:
            if POIDS_ECO_PLI[-1] < poids or poids<0:
                print("Erreur le poids n'est pas disponible pour cette categorie ")
                return False
    return True

def categorie_poid(poids:float,type_lettre:str,gramme_en_plus:float='0.00',complement_aerien:str='None'):
    """

    :param poids(float): poids de la lettre
    :param type_lettre(str):type de la lettre
    :param gramme_en_plus(float):gramme en plus de la limite
    :param complement_aerien:Permet de savoir la categorie du pays et d'adapté le prix si le gramme depasse la limite
    :return:prix_taxe(float):Renvoie le prix total avec les taxes comprises
    """
    prix_taxe=0.00
    if type_lettre == TYPE_LETTRE[0]:

        for i in range(len(POIDS_VERTE)):#On parcours tant qu'on a pas la categories suffissante

            if poids < POIDS_VERTE[i]:#Des qu'un poids de la categorie depasse le poids on recupere le prix correspondant et on applique la taxe si il y en a

                prix_taxe = prix_taxe + TARIF_NET_VERTE[i]
                if complement_aerien=="OM1":
                    prix_taxe=prix_taxe+(gramme_en_plus*TAAF_VERTE_OM1)
                elif complement_aerien=="OM2":
                    prix_taxe=prix_taxe+(gramme_en_plus * TAAF_VERTE_OM2)
                return prix_taxe

    elif type_lettre == TYPE_LETTRE[1]:

        for i in range(len(POIDS_PRIORITAIRE)):

            if poids < POIDS_PRIORITAIRE[i]:

                prix_taxe = prix_taxe + TARIF_NET_PRIORITAIRE[i]
                if complement_aerien=="OM1":
                    prix_taxe=prix_taxe+(gramme_en_plus*TAAF_PRIORITAIRE_OM1)
                elif complement_aerien=="OM2":
                    prix_taxe=prix_taxe+(gramme_en_plus * TAAF_PRIORITAIRE_OM2)
                return prix_taxe

    elif type_lettre == TYPE_LETTRE[2]:

        for i in range(len(POIDS_ECO_PLI)):

            if poids < POIDS_ECO_PLI[i]:
                prix_taxe = prix_taxe + TARIF_NET_ECO_PLI[i]
                if complement_aerien=="OM1":
                    prix_taxe=prix_taxe+(gramme_en_plus*TAAF_PRIORITAIRE_OM1)
                elif complement_aerien=="OM2":
                    prix_taxe=prix_taxe+(gramme_en_plus * TAAF_PRIORITAIRE_OM2)
                return prix_taxe

def prix(poids:float,type_lettre:str):
    """
    Fonction qui permet de renvoyer l’affranchissement necessaire pour l'envoie d'une lettre selon son type et son poids
    :param poids(float): poids de la lettre
    :param type_lettre(str): type de la lettre
    :return:affranchissement(float) : coût necessaire pour l'envoie d'une lettre
    """
    affranchissement = 0
    gramme_en_plus=float(poids-LIMITE)#On calcule si le poids depasse la limite ou le tarif est pris en compte en outre mer
    if gramme_en_plus<0:
        gramme_en_plus=0.00

    str_sticker=str(STICKER_SUIVIE)#Ici cela sert seulement pour indiquer le prix dans le input
    demande_sticker = input("Voulez vous envoyé un sticker de suivie  ?("+str_sticker+"euros  (oui ou non) ) ").upper()
    if demande_sticker=="OUI":
        affranchissement=affranchissement+STICKER_SUIVIE
    if  demande_sticker=="NON":
        print("Le sticker ne sera donc pas pris en compte")
    elif demande_sticker!="NON" or demande_sticker!="OUI" :
        print("Je n'ai pas compris votre réponse")
        print("Le sticker ne sera donc pas pris en compte")


    demande_pays=input("Voulez vous envoyé une lettre dans un pays d'outre mer (oui ou non) ? ").upper()
    if(demande_pays=="OUI"):
        print("Voici la liste des pays disponible :")
        print("OM1:")
        for i in range(len(OUTREMER1)):#Affichage de la liste des pays Outre mer 1
            print(OUTREMER1[i])
        print("OM2:")
        for i in range(len(OUTREMER2)): #Affichage de la liste des pays Outre mer 2
            print(OUTREMER2[i])
        pays=input("Veuillez choisir un pays : ").upper()
        while pays not in OUTREMER1 and pays not in OUTREMER2:#Systeme de verification qui redemande tant que le pays n'est pas dans une des deux liste
            if pays not in OUTREMER1 and pays not in OUTREMER2:
                    print("Erreur le pays n'est pas dans la liste")
                    pays = input("Veuillez choisir un pays : ").upper()
        if pays in OUTREMER1:
                affranchissement =categorie_poid(poids, type_lettre,gramme_en_plus,"OM1")
        elif pays in OUTREMER2:
                affranchissement =categorie_poid(poids, type_lettre,gramme_en_plus,"OM2")
    elif(demande_pays=="NON"):
        affranchissement=categorie_poid(poids, type_lettre)
    affranchissement=round(affranchissement, 2)#Permet d'arrondir a deux chiffres apres la virgule vu qu'on parle d'euros
    return affranchissement

def lettre(poids:float,type_lettre:str):
    """
    Permet d'afficher le prix de l'envoie de la lettre
    :param poids(float): poids de la lettre
    :param type_lettre(str): type de la lettre
    :return: None
    """
    if verification_parametre(poids,type_lettre)==True:
        print("Vous devez payer",prix(poids,type_lettre),"euros pour envoyer cette lettre")

lettre(120,"verte")
lettre(120,"prioritaire")
lettre(120,"eco-pli")









